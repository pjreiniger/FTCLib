From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PJ Reiniger <pj.reiniger@gmail.com>
Date: Sun, 11 Aug 2024 07:13:58 -0400
Subject: [PATCH 09/11] LinearSystemId

---
 .../math/controller/ElevatorFeedforward.java  | 42 -------------------
 1 file changed, 42 deletions(-)

diff --git a/wpimath/src/main/java/edu/wpi/first/math/controller/ElevatorFeedforward.java b/wpimath/src/main/java/edu/wpi/first/math/controller/ElevatorFeedforward.java
index 92ac2b8436c43ab03d2a29a8225585ecba34c4d9..d3b24029cea27d38394c52ab2b0f09d3d744d92e 100644
--- a/wpimath/src/main/java/edu/wpi/first/math/controller/ElevatorFeedforward.java
+++ b/wpimath/src/main/java/edu/wpi/first/math/controller/ElevatorFeedforward.java
@@ -72,48 +72,6 @@ public class ElevatorFeedforward {
     return ks * Math.signum(velocity) + kg + kv * velocity + ka * acceleration;
   }
 
-  /**
-   * Calculates the feedforward from the gains and setpoints.
-   *
-   * <p>Note this method is inaccurate when the velocity crosses 0.
-   *
-   * @param currentVelocity The current velocity setpoint.
-   * @param nextVelocity The next velocity setpoint.
-   * @param dtSeconds Time between velocity setpoints in seconds.
-   * @return The computed feedforward.
-   */
-  public double calculate(double currentVelocity, double nextVelocity, double dtSeconds) {
-    // Discretize the affine model.
-    //
-    //   dx/dt = Ax + Bu + c
-    //   dx/dt = Ax + B(u + B⁺c)
-    //   xₖ₊₁ = eᴬᵀxₖ + A⁻¹(eᴬᵀ - I)B(uₖ + B⁺cₖ)
-    //   xₖ₊₁ = A_d xₖ + B_d (uₖ + B⁺cₖ)
-    //   xₖ₊₁ = A_d xₖ + B_duₖ + B_d B⁺cₖ
-    //
-    // Solve for uₖ.
-    //
-    //   B_duₖ = xₖ₊₁ − A_d xₖ − B_d B⁺cₖ
-    //   uₖ = B_d⁺(xₖ₊₁ − A_d xₖ − B_d B⁺cₖ)
-    //   uₖ = B_d⁺(xₖ₊₁ − A_d xₖ) − B⁺cₖ
-    //
-    // For an elevator with the model
-    // dx/dt = -Kv/Ka x + 1/Ka u - Kg/Ka - Ks/Ka sgn(x),
-    // A = -Kv/Ka, B = 1/Ka, and c = -(Kg/Ka + Ks/Ka sgn(x)). Substitute in B
-    // assuming sgn(x) is a constant for the duration of the step.
-    //
-    //   uₖ = B_d⁺(xₖ₊₁ − A_d xₖ) − Ka(-(Kg/Ka + Ks/Ka sgn(x)))
-    //   uₖ = B_d⁺(xₖ₊₁ − A_d xₖ) + Ka(Kg/Ka + Ks/Ka sgn(x))
-    //   uₖ = B_d⁺(xₖ₊₁ − A_d xₖ) + Kg + Ks sgn(x)
-    var plant = LinearSystemId.identifyVelocitySystem(this.kv, this.ka);
-    var feedforward = new LinearPlantInversionFeedforward<>(plant, dtSeconds);
-
-    var r = MatBuilder.fill(Nat.N1(), Nat.N1(), currentVelocity);
-    var nextR = MatBuilder.fill(Nat.N1(), Nat.N1(), nextVelocity);
-
-    return kg + ks * Math.signum(currentVelocity) + feedforward.calculate(r, nextR).get(0, 0);
-  }
-
   /**
    * Calculates the feedforward from the gains and velocity setpoint (acceleration is assumed to be
    * zero).
